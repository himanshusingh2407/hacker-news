{"version":3,"sources":["components/Header/Header.js","components/NewsItem/NewsItem.js","components/NewsList/NewsList.js","components/Pagination/Pagination.js","components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","NewsItem","state","title","url","by","getDate","time","Date","toISOString","slice","href","this","target","rel","_this2","Axios","get","concat","props","newsId","then","response","news","data","setState","NewsList","generateNewsList","newsList","map","components_NewsItem_NewsItem","key","pageData","Pagination","generatePageLinks","_this$props","_this","currentIndex","total","updateCurrentPage","acc","_loop","i","push","onClick","Dashboard","currentPageIndex","paginatedData","splitUp","arr","n","rest","length","restUsed","partLength","Math","floor","result","end","add","pageIndex","components_NewsList_NewsList","components_Pagination_Pagination","App","components_Header_Header","components_Dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWAaeA,0LARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,sBAHeC,8BCoCNC,oNAjCbC,MAAQ,CACNC,MAAO,KACPC,IAAK,KACLC,GAAI,QAGNC,QAAU,SAACC,GAAD,OAAW,IAAIC,KAAKD,GAAME,cAAcC,MAAM,EAAG,6EAGzD,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,KAAGa,KAAMC,KAAKV,MAAME,IAAKS,OAAO,SAASC,IAAI,sBAAsBf,UAAU,SAC3EH,EAAAC,EAAAC,cAAA,UAAKc,KAAKV,MAAMC,QAEjBS,KAAKV,MAAMG,GAAKT,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,SAAIc,KAAKV,MAAMG,KAAgB,KACxDO,KAAKV,MAAMK,KAAOX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,SAAgCH,EAAAC,EAAAC,cAAA,SAAIc,KAAKN,QAAQM,KAAKV,MAAMK,QAAmB,kDAKpF,IAAAQ,EAAAH,KAClBI,IAAMC,IAAN,8CAAAC,OAAwDN,KAAKO,MAAMC,OAAnE,UAAkFC,KAAK,SAACC,GACtF,IAAIC,EAAOD,EAASE,KACpBT,EAAKU,SAAS,CACZtB,MAAOoB,EAAKpB,MACZC,IAAKmB,EAAKnB,IACVC,GAAIkB,EAAKlB,GACTE,KAAMgB,EAAKhB,gBA7BIP,cCcR0B,oNAZbC,iBAAmB,SAACC,GAClB,OAAOA,EAASC,IAAI,SAACT,GAAD,OAAYxB,EAAAC,EAAAC,cAACgC,EAAD,CAAUV,OAAQA,EAAQW,IAAKX,+EAG/D,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZa,KAAKe,iBAAiBf,KAAKO,MAAMa,kBARnBhC,cCwBRiC,oNAvBbC,kBAAoB,WAGlB,IAHwB,IAAAC,EACyBC,EAAKjB,MAAhDkB,EADkBF,EAClBE,aAAcC,EADIH,EACJG,MAAOC,EADHJ,EACGI,kBACvBC,EAAM,GAFcC,EAAA,SAGfC,GACPF,EAAIG,KACF/C,EAAAC,EAAAC,cAAA,QAAMiC,IAAKW,EACT3C,UAAW2C,IAAML,EAAe,mBAAqB,YACrDO,QAAS,WAAQL,EAAkBG,KAClCA,EAAI,KALFA,EAAI,EAAGA,EAAIJ,EAAOI,IAAKD,EAAvBC,GAQT,OAAOF,2EAIP,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZa,KAAKsB,4BAnBWlC,cCmEV6C,oNA9Db3C,MAAQ,CACN4C,iBAAkB,EAClBC,cAAe,QAGjBC,QAAU,SAACC,EAAKC,GAMd,IALA,IAAIC,EAAOF,EAAIG,OAASF,EACtBG,EAAWF,EACXG,EAAaC,KAAKC,MAAMP,EAAIG,OAASF,GACrCO,EAAS,GAEFf,EAAI,EAAGA,EAAIO,EAAIG,OAAQV,GAAKY,EAAY,CAC/C,IAAII,EAAMJ,EAAaZ,EACrBiB,GAAM,EAEK,IAATR,GAAcE,IAChBK,IACAL,IACAM,GAAM,GAGRF,EAAOd,KAAKM,EAAIvC,MAAMgC,EAAGgB,IAErBC,GACFjB,IAIJ,OAAOe,KAGTlB,kBAAoB,SAACqB,GACnBxB,EAAKX,SAAS,CACZqB,iBAAkBc,6EAKpB,OACEhE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,QACCa,KAAKV,MAAM6C,cACVnD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+D,EAAD,CAAU7B,SAAUpB,KAAKV,MAAM6C,cAAcnC,KAAKV,MAAM4C,oBACxDlD,EAAAC,EAAAC,cAACgE,EAAD,CAAYzB,aAAczB,KAAKV,MAAM4C,iBAAkBR,MAAO1B,KAAKV,MAAM6C,cAAcK,OAAQb,kBAAmB3B,KAAK2B,qBAEvH,kDAKU,IAAAxB,EAAAH,KAClBI,IAAMC,IAAI,yDAAyDI,KAAK,SAACC,GACvE,IAAMyB,EAAgBhC,EAAKiC,QAAQ1B,EAASE,KAAM,IAElDT,EAAKU,SAAS,CACZsB,2BA1DgB/C,cCUT+D,0LATX,OACEnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkE,EAAD,MACApE,EAAAC,EAAAC,cAACmE,EAAD,cALUjE,cCOEkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.0919d4fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"header\">\n        Hacker News\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport './NewsItem.css';\n\nclass NewsItem extends Component {\n\n  state = {\n    title: null,\n    url: null,\n    by: null\n  }\n\n  getDate = (time) => (new Date(time).toISOString().slice(0, 10));\n\n  render() {\n    return (\n      <div className=\"newsItem\">\n        <a href={this.state.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"title\">\n          <h3>{this.state.title}</h3>\n        </a>\n        {this.state.by ? <div>By: <i>{this.state.by}</i></div> : null}\n        {this.state.time ? <div className=\"newsDate\">Date: <i>{this.getDate(this.state.time)}</i></div> : null}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    Axios.get(`https://hacker-news.firebaseio.com/v0/item/${this.props.newsId}.json`).then((response) => {\n      let news = response.data;\n      this.setState({\n        title: news.title,\n        url: news.url,\n        by: news.by,\n        time: news.time\n      });\n    });\n  }\n}\n\nexport default NewsItem;\n","import React, { Component } from 'react';\nimport NewsItem from '../NewsItem/NewsItem';\nimport './NewsList.css';\n\nclass NewsList extends Component {\n\n  generateNewsList = (newsList) => {\n    return newsList.map((newsId) => <NewsItem newsId={newsId} key={newsId}/>);\n  }\n  render() {\n    return (\n      <div className=\"newsList\">\n        {this.generateNewsList(this.props.pageData)}\n      </div>\n    );\n  }\n}\n\nexport default NewsList;\n","import React, { Component } from 'react';\nimport './Pagination.css';\n\nclass Pagination extends Component {\n\n  generatePageLinks = () => {\n    let { currentIndex, total, updateCurrentPage } = this.props;\n    let acc = [];\n    for (let i = 0; i < total; i++) {\n      acc.push(\n        <span key={i}\n          className={i === currentIndex ? 'active pageIndex' : 'pageIndex'}\n          onClick={() => { updateCurrentPage(i) }}>\n          {i + 1}\n        </span>);\n    }\n    return acc;\n  }\n\n  render() {\n    return (\n      <div className=\"pagination\">\n        {this.generatePageLinks()}\n      </div>\n    );\n  }\n}\n\nexport default Pagination;\n","import React, { Component } from 'react';\nimport NewsList from '../NewsList/NewsList';\nimport Pagination from '../Pagination/Pagination';\nimport Axios from 'axios';\nimport './Dashboard.css';\n\nclass Dashboard extends Component {\n\n  state = {\n    currentPageIndex: 0,\n    paginatedData: null\n  }\n\n  splitUp = (arr, n) => {\n    var rest = arr.length % n, // how much to divide\n      restUsed = rest, // to keep track of the division over the elements\n      partLength = Math.floor(arr.length / n),\n      result = [];\n\n    for (var i = 0; i < arr.length; i += partLength) {\n      var end = partLength + i,\n        add = false;\n\n      if (rest !== 0 && restUsed) { // should add one element for the division\n        end++;\n        restUsed--; // we've used one division element now\n        add = true;\n      }\n\n      result.push(arr.slice(i, end)); // part of the array\n\n      if (add) {\n        i++; // also increment i in the case we added an extra element for division\n      }\n    }\n\n    return result;\n  }\n\n  updateCurrentPage = (pageIndex) => {\n    this.setState({\n      currentPageIndex: pageIndex\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"dashboard\">\n        <h1 className=\"dashBoardTitle\">News</h1>\n        {this.state.paginatedData ?\n          <div>\n            <NewsList pageData={this.state.paginatedData[this.state.currentPageIndex]} />\n            <Pagination currentIndex={this.state.currentPageIndex} total={this.state.paginatedData.length} updateCurrentPage={this.updateCurrentPage}/>\n          </div>\n          : null}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    Axios.get('https://hacker-news.firebaseio.com/v0/topstories.json').then((response) => {\n      const paginatedData = this.splitUp(response.data, 50);\n\n      this.setState({\n        paginatedData\n      });\n    });\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}